DROP TRIGGER IF EXISTS USERSFEEDBACK_UPDATE ON USERSFEEDBACK;
DROP FUNCTION IF EXISTS USERSFEEDBACK_UPDATE();

CREATE FUNCTION USERSFEEDBACK_UPDATE() RETURNS trigger AS $USERSFEEDBACK_UPDATE$
    DECLARE
        numLike INTEGER;
        numDislike INTEGER;
    BEGIN 
        
        SELECT COUNT(*) INTO numLike FROM USERSFEEDBACK as ufb where ufb.USERSFEEDBACK_TYPE = NEW.USERSFEEDBACK_TYPE AND ufb.USERSFEEDBACK_ITEM_ID = NEW.USERSFEEDBACK_ITEM_ID and ufb.USERSFEEDBACK_ISLIKE = true;
        SELECT COUNT(*) INTO numDislike FROM USERSFEEDBACK as ufb where ufb.USERSFEEDBACK_TYPE = NEW.USERSFEEDBACK_TYPE AND ufb.USERSFEEDBACK_ITEM_ID = NEW.USERSFEEDBACK_ITEM_ID and ufb.USERSFEEDBACK_ISLIKE = false;
        
        IF NEW.USERSFEEDBACK_TYPE = 2 THEN
            UPDATE QUESTIONS SET questions_numlike = numLike where questions_unique_id = NEW.USERSFEEDBACK_ITEM_ID;
            UPDATE QUESTIONS SET questions_numdislike = numDislike where questions_unique_id = NEW.USERSFEEDBACK_ITEM_ID;
        ELSEIF NEW.USERSFEEDBACK_TYPE = 3 THEN
            UPDATE ANSWERS SET answers_numlike = numLike where answers_unique_id = NEW.USERSFEEDBACK_ITEM_ID;
            UPDATE ANSWERS SET answers_numdislike = numDislike where answers_unique_id = NEW.USERSFEEDBACK_ITEM_ID;
        END IF;
        RETURN NEW;
    END;
$USERSFEEDBACK_UPDATE$ LANGUAGE plpgsql;

CREATE TRIGGER USERSFEEDBACK_UPDATE AFTER INSERT OR UPDATE ON USERSFEEDBACK
    FOR EACH ROW EXECUTE PROCEDURE USERSFEEDBACK_UPDATE();
