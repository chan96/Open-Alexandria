-- USERS
DROP TRIGGER IF EXISTS users_update ON users;
DROP FUNCTION IF EXISTS users_update();

CREATE FUNCTION users_update() RETURNS trigger AS $users_update$
    BEGIN
        NEW.USERS_DATEUPDATED := current_timestamp;
        RETURN NEW;
    END;
$users_update$ LANGUAGE plpgsql;

CREATE TRIGGER users_update BEFORE INSERT OR UPDATE ON users
    FOR EACH ROW EXECUTE PROCEDURE users_update();

-- COURSES

DROP TRIGGER IF EXISTS COURSES_UPDATE ON COURSES;
DROP FUNCTION IF EXISTS COURSES_UPDATE();

CREATE FUNCTION COURSES_UPDATE() RETURNS trigger AS $COURSES_UPDATE$
    BEGIN
        NEW.COURSES_DATEUPDATED := current_timestamp;
        RETURN NEW;
    END;
$COURSES_UPDATE$ LANGUAGE plpgsql;

CREATE TRIGGER COURSES_UPDATE BEFORE INSERT OR UPDATE ON COURSES
    FOR EACH ROW EXECUTE PROCEDURE COURSES_UPDATE();

-- QUESTIONS

DROP TRIGGER IF EXISTS QUESTIONS_UPDATE ON QUESTIONS;
DROP FUNCTION IF EXISTS QUESTIONS_UPDATE();

CREATE FUNCTION QUESTIONS_UPDATE() RETURNS trigger AS $QUESTIONS_UPDATE$
    BEGIN
        NEW.QUESTIONS_DATEUPDATED := current_timestamp;
        RETURN NEW;
    END;
$QUESTIONS_UPDATE$ LANGUAGE plpgsql;

CREATE TRIGGER QUESTIONS_UPDATE BEFORE INSERT OR UPDATE ON QUESTIONS
    FOR EACH ROW EXECUTE PROCEDURE QUESTIONS_UPDATE();

-- ANSWERS

DROP TRIGGER IF EXISTS ANSWERS_UPDATE ON ANSWERS;
DROP FUNCTION IF EXISTS ANSWERS_UPDATE();

CREATE FUNCTION ANSWERS_UPDATE() RETURNS trigger AS $ANSWERS_UPDATE$
    BEGIN
        NEW.ANSWERS_DATEUPDATED := current_timestamp;
        RETURN NEW;
    END;
$ANSWERS_UPDATE$ LANGUAGE plpgsql;

CREATE TRIGGER ANSWERS_UPDATE BEFORE INSERT OR UPDATE ON ANSWERS
    FOR EACH ROW EXECUTE PROCEDURE ANSWERS_UPDATE();

-- FLASHCARDDECKS

DROP TRIGGER IF EXISTS FLASHCARDDECKS_UPDATE ON FLASHCARDDECKS;
DROP FUNCTION IF EXISTS FLASHCARDDECKS_UPDATE();

CREATE FUNCTION FLASHCARDDECKS_UPDATE() RETURNS trigger AS $FLASHCARDDECKS_UPDATE$
    BEGIN
        NEW.FLASHCARDDECKS_DATEUPDATED := current_timestamp;
        RETURN NEW;
    END;
$FLASHCARDDECKS_UPDATE$ LANGUAGE plpgsql;

CREATE TRIGGER FLASHCARDDECKS_UPDATE BEFORE INSERT OR UPDATE ON FLASHCARDDECKS
    FOR EACH ROW EXECUTE PROCEDURE FLASHCARDDECKS_UPDATE();

-- FLASHCARDS

DROP TRIGGER IF EXISTS FLASHCARDS_UPDATE ON FLASHCARDS;
DROP FUNCTION IF EXISTS FLASHCARDS_UPDATE();

CREATE FUNCTION FLASHCARDS_UPDATE() RETURNS trigger AS $FLASHCARDS_UPDATE$
    BEGIN
        NEW.FLASHCARDDECKS_DATEUPDATED := current_timestamp;
        RETURN NEW;
    END;
$FLASHCARDS_UPDATE$ LANGUAGE plpgsql;

CREATE TRIGGER FLASHCARDS_UPDATE BEFORE INSERT OR UPDATE ON FLASHCARDS
    FOR EACH ROW EXECUTE PROCEDURE FLASHCARDS_UPDATE();